{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "TODO application (Gotoinc - API)",
    "description": "This is a sample TODO application Server based on the OpenAPI 3.0 specification."
  },
  "consumes": [
    "application/json",
    "multipart/form-data"
  ],
  "produces": [
    "application/json"
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://test-task-gotoinc.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations about User"
    },
    {
      "name": "TODO",
      "description": "Operations with todoes"
    },
    {
      "name": "Group",
      "description": "Operations with groups"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User registration",
        "description": "This endpoint will allow a user to create a new account by providing their username and password.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Name in use"
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User login",
        "description": "This endpoint will allow a user to log in by providing their username and password.",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Name or password is wrong"
          }
        }
      }
    },
    "/api/users/logout": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User logout",
        "description": "This endpoint will allow a user to logout.",
        "operationId": "logoutUser",
        "responses": {
          "204": {
            "description": "Logout success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/refresh": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Refresh token",
        "description": "This endpoint will allow client to refresh their accessToken when it is expired.",
        "operationId": "refreshAccess",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Token invalid"
          }
        }
      }
    },
    "/api/todoes": {
      "get": {
        "tags": [
          "TODO"
        ],
        "summary": "Retrieve all TODO items for a user",
        "description": "",
        "operationId": "get user todoes",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todoes"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TODO"
        ],
        "summary": "Create a new TODO item",
        "description": "",
        "operationId": "create a TODO",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewTodo"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/todoes/{id}": {
      "get": {
        "tags": [
          "TODO"
        ],
        "summary": "Retrieve a TODO item by ID",
        "description": "",
        "operationId": "get a TODO",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "TODO"
        ],
        "summary": "Update a TODO item",
        "description": "",
        "operationId": "update a TODO",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTodo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TODO"
        ],
        "summary": "Delete a TODO item",
        "description": "",
        "operationId": "Delete a TODO",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Retrieve all groups for a user",
        "description": "",
        "operationId": "get user groups",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a new group",
        "description": "",
        "operationId": "create a group",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NewGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/groups/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Retrieve a group by ID",
        "description": "",
        "operationId": "get a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Update a group",
        "description": "",
        "operationId": "update a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group",
        "description": "",
        "operationId": "Delete a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "example": "John"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "example": "John"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/User"
          },
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR6cCI6IkpXVCJ9.eyJpZCI6IjY0MGY4OWQxZmUxMzdjMGNmNDJl2Y5MiIsImlhdCI6MTY3ODczOTkyMSwiZXhwIjoxNjc4NzQxNzIxfQ.4rGj7pO6M516CvsBM_twj2UdPisR6HRJMyRwY2RdMjO"
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI3NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0MGY4OWQxZmUxMzdjMGNmNDJlN2Y5MiIsImlhdCI6MTY3ODczOTkyMSwiZXhwIjoxNjc5mzQ0NzIxfQ.tsJkcG32d4WP60k53rI5_Vfxepdo69avNtfi6NygFks"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640f89d1fe137c0cf42e7f92"
          },
          "username": {
            "type": "string",
            "example": "John"
          }
        }
      },
      "Todo": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "Do test task"
          },
          "isCompleted": {
            "type": "boolean",
            "example": false
          },
          "group": {
            "type": "string",
            "example": "Not sorted"
          },
          "subtasks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "React.js",
              "Node.js"
            ]
          },
          "userId": {
            "type": "string",
            "example": "640f41ff1edb0ce195cd7fc5"
          },
          "_id": {
            "type": "string",
            "example": "640f5658d8c74d21bb195412"
          }
        }
      },
      "NewTodo": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "example": "Do test task"
          },
          "isCompleted": {
            "type": "boolean"
          },
          "group": {
            "type": "string"
          },
          "subtasks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Todoes": {
        "type": "array",
        "items": {
          "type": "object",
          "$ref": "#/components/schemas/Todo"
        }
      },
      "UpdateTodo": {
        "type": "object",
        "properties": {
          "isCompleted": {
            "type": "boolean"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Importantly"
          },
          "userId": {
            "type": "string",
            "example": "640f41ff1edb0ce195cd7fc5"
          },
          "_id": {
            "type": "string",
            "example": "640f59534e87721f8f79a2c9"
          }
        }
      },
      "NewGroup": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Homework"
          }
        }
      },
      "Groups": {
        "type": "array",
        "items": {
          "type": "object",
          "$ref": "#/components/schemas/Group"
        }
      },
      "UpdateGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RefreshRequest": {
        "type": "object",
        "required": [
          "refreshToken"
        ],
        "properties": {
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI3NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0MGY4OWQxZmUxMzdjMGNmNDJlN2Y5MiIsImlhdCI6MTY3ODczOTkyMSwiZXhwIjoxNjc5mzQ0NzIxfQ.tsJkcG32d4WP60k53rI5_Vfxepdo69avNtfi6NygFks"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR6cCI6IkpXVCJ9.eyJpZCI6IjY0MGY4OWQxZmUxMzdjMGNmNDJl2Y5MiIsImlhdCI6MTY3ODczOTkyMSwiZXhwIjoxNjc4NzQxNzIxfQ.4rGj7pO6M516CvsBM_twj2UdPisR6HRJMyRwY2RdMjO"
          },
          "refreshToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI3NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0MGY4OWQxZmUxMzdjMGNmNDJlN2Y5MiIsImlhdCI6MTY3ODczOTkyMSwiZXhwIjoxNjc5mzQ0NzIxfQ.tsJkcG32d4WP60k53rI5_Vfxepdo69avNtfi6NygFks"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}